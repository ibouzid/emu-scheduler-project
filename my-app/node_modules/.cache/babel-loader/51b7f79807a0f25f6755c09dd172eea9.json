{"ast":null,"code":"/**\n * Appointment-Picker - a lightweight, accessible and customizable timepicker (ES5 syntax)\n *\n * @module Appointment-Picker\n * @license MIT\n * @version 2.0.0\n * @author Jan Suwart\n*/\n(function (root, factory) {\n  if (typeof exports === 'object') {\n    module.exports = factory(root); // CommonJS (Node, Browserify, Webpack)\n  } else if (typeof define === 'function' && define.amd) {\n    define('appointment-picker', [], function () {\n      return factory(root); // AMD (RequireJS)\n    });\n  } else {\n    root.AppointmentPicker = factory(root); // Browser globals (root = window)\n  }\n})(this, function () {\n  'use strict';\n  /**\n   * Constructor\n   * @param {HTMLElement} el - reference to the time input field\n   * @param {Object} options - user defined options\n   */\n\n  var AppointmentPicker = function (el, options) {\n    this.options = {\n      interval: 60,\n      // Appointment interval in minutes\n      minTime: 0,\n      // min pickable hour (1-24)\n      maxTime: 24,\n      // max pickable hour (1-24)\n      startTime: 0,\n      // min displayed hour (1-24)\n      endTime: 24,\n      // max displayed hour (1-24)\n      disabled: [],\n      // Array of disabled times, i.e. ['10:30', ...]\n      mode: '24h',\n      // Whether to use 24h or 12h system\n      large: false,\n      // Whether large button style\n      leadingZero: false,\n      // Whether to zero pad hour (i.e. 07:15)\n      allowReset: true,\n      // Whether a time can be reset once entered\n      title: 'Timepicker',\n      // Title\n      templateInner: '<li class=\"appo-picker-list-item {{disabled}}\"><input type=\"button\" tabindex=\"-1\" value=\"{{time}}\" {{disabled}}></li>',\n      templateOuter: '<span class=\"appo-picker-title\">{{title}}</span><ul class=\"appo-picker-list\">{{innerHtml}}</ul>',\n      timeFormat12: 'H:M apm',\n      // Custom time format, must contain H and M placeholder\n      timeFormat24: 'H:M'\n    };\n    this.el = el;\n    this.picker = null;\n    this.isOpen = false;\n    this.isInDom = false;\n    this.time = {}; // { h: '18', m: '30' }\n\n    this.intervals = []; // [0, 15, 30, 45]\n\n    this.disabledArr = [];\n    this.displayTime = ''; // '6:30pm'\n\n    this.selectionEventFn = _onselect.bind(this);\n    this.changeEventFn = _onchange.bind(this);\n    this.clickEventFn = _onInputClick.bind(this);\n    this.closeEventFn = this.close.bind(this);\n    this.openEventFn = this.open.bind(this);\n    this.keyEventFn = _onKeyPress.bind(this);\n    this.bodyFocusEventFn = _onBodyFocus.bind(this);\n    initialize(this, el, options || {});\n  };\n  /**\n   * Initialize the picker, merge default options and check for errors\n   * @param {Object} _this - this view reference\n   * @param {HTMLElement} el - reference to the time input field\n   * @param {Object} options - user defined options\n   */\n\n\n  function initialize(_this, el, options) {\n    for (var opt in options) {\n      _this.options[opt] = options[opt];\n    }\n\n    if (!_this.el) return;\n\n    if (_this.el.length !== undefined) {\n      console.warn('appointment-picker: pass only one dom element as argument');\n      return;\n    } else if (_this.options.interval > 60) {\n      console.warn('appointment-picker: the maximal interval is 60');\n      return;\n    } // Create 2-dim array holding all disabled times\n\n\n    _this.disabledArr = _this.options.disabled.map(function (item) {\n      return _parseTime(item);\n    }); // Create array holding all minute permutations\n\n    for (var j = 0; j < 60 / _this.options.interval; j++) {\n      _this.intervals[j] = j * _this.options.interval;\n    }\n\n    _this.setTime(_this.el.value);\n\n    el.addEventListener('keyup', _this.keyEventFn);\n    el.addEventListener('change', _this.changeEventFn);\n    el.addEventListener('focus', _this.openEventFn);\n  } // Attach visibility classes and set the picker's position\n\n\n  AppointmentPicker.prototype.render = function () {\n    if (this.isOpen && this.isInDom) {\n      var bottom = this.el.offsetTop + this.el.offsetHeight;\n      var left = this.el.offsetLeft;\n      var oldSelectedEl = this.picker.querySelector('input.is-selected');\n      this.picker.classList.add('is-open');\n      this.el.classList.add('is-expanded');\n\n      if (oldSelectedEl) {\n        oldSelectedEl.classList.remove('is-selected');\n      }\n\n      if (this.time.hasOwnProperty('h')) {\n        var selectedEl = this.picker.querySelector('[value=\"' + this.displayTime + '\"]');\n\n        if (selectedEl) {\n          selectedEl.classList.add('is-selected');\n        }\n      }\n\n      this.picker.style.top = bottom + 'px';\n      this.picker.style.left = left + 'px';\n    } else if (this.isInDom) {\n      this.picker.classList.remove('is-open');\n      this.el.classList.remove('is-expanded');\n    }\n  }; // Opens the picker, registers further click events\n\n\n  AppointmentPicker.prototype.open = function () {\n    var _this = this;\n\n    if (this.isOpen) return;\n\n    if (!this.isInDom) {\n      this.picker = _build(_this);\n      this.isInDom = true;\n    }\n\n    this.isOpen = true;\n    this.render();\n    this.picker.addEventListener('click', this.selectionEventFn);\n    this.picker.addEventListener('keyup', this.keyEventFn);\n    this.el.removeEventListener('click', this.clickEventFn);\n\n    _dispatchEvent(this.el, 'open', this.time, this.displayTime); // Delay document click listener to prevent picker flashing\n\n\n    setTimeout(function () {\n      document.body.addEventListener('click', _this.closeEventFn);\n      document.body.addEventListener('focus', _this.bodyFocusEventFn, true);\n    }, 100);\n  };\n  /**\n   * Close the picker and unregister attached events\n   * @param {Event|null} e - i.e. mouse click event\n   */\n\n\n  AppointmentPicker.prototype.close = function (e) {\n    if (!this.isOpen) return; // Polyfil matches selector if missing\n\n    if (!Element.prototype.matches) Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\n    if (e) {\n      var el = e.target;\n      if (el.isEqualNode(this.el)) return; // Check if the clicked target is inside the picker\n\n      while (el) {\n        if (el.matches('.appo-picker')) {\n          return;\n        } else {\n          el = el.parentElement;\n        }\n      }\n    } // The target was outside or didn't exist, close picker\n\n\n    this.isOpen = false;\n    this.render();\n    this.picker.removeEventListener('click', this.selectionEventFn);\n    this.picker.removeEventListener('keyup', this.keyEventFn);\n    document.body.removeEventListener('click', this.closeEventFn);\n    document.body.removeEventListener('focus', this.bodyFocusEventFn, true); // Add an event listener to open on click regardless of mouse focus\n\n    this.el.addEventListener('click', this.clickEventFn);\n\n    _dispatchEvent(this.el, 'close', this.time, this.displayTime);\n  };\n  /**\n   * Listener for an appointment selection\n   * @param {Event} e - mouse click or keyboard event\n   */\n\n\n  function _onselect(e) {\n    var _this = this;\n\n    if (!e.target.value) return;\n    this.setTime(e.target.value);\n    this.el.focus();\n    setTimeout(function () {\n      _this.close(null);\n    }, 100);\n  } // Handles manual input changes on input field\n\n\n  function _onchange() {\n    this.setTime(this.el.value);\n  }\n  /**\n   * Move focus forward and backward on keyboard arrow key, close picker on ESC\n   * @param {Event} e - keyboard event\n   */\n\n\n  function _onKeyPress(e) {\n    var first = this.picker.querySelector('input[type=\"button\"]:not([disabled])');\n    var selected = this.picker.querySelector('input.is-selected');\n    var next = null;\n\n    switch (e.keyCode) {\n      case 13: // Enter\n\n      case 27:\n        // ESC\n        this.close(null);\n        break;\n\n      case 38:\n        // Up Arrow\n        next = selected ? _getNextSibling(selected.parentNode, -1) : first.parentNode;\n        break;\n\n      case 40:\n        // Down Arrow\n        next = selected ? _getNextSibling(selected.parentNode, 1) : first.parentNode;\n        break;\n\n      default:\n    }\n\n    if (next && !next.firstChild.disabled) {\n      next.firstChild.classList.add('is-selected');\n      if (selected) selected.classList.remove('is-selected');\n      this.setTime(next.firstChild.value);\n    }\n  } // Close the picker on document focus, usually by hitting TAB\n\n\n  function _onBodyFocus(e) {\n    if (!this.isOpen) return;\n    this.close(e);\n  } // Opens the picker, useful if the input has focus, still to be able to open the picker\n\n\n  function _onInputClick() {\n    this.open();\n  } // Remove the picker's node from the dom and unregister all events\n\n\n  AppointmentPicker.prototype.destroy = function () {\n    this.close(null);\n\n    if (this.picker) {\n      this.picker.parentNode.removeChild(this.picker);\n      this.picker = null;\n    }\n\n    this.el.removeEventListener('focus', this.openEventFn);\n    this.el.removeEventListener('keyup', this.keyEventFn);\n    this.el.removeEventListener('change', this.changeEventFn);\n    this.el.removeEventListener('click', this.clickEventFn);\n  };\n  /**\n   * Sets the pickers current time variable after validating for min/max\n   * @param {String} value - time input string, i.e. '12:15pm'\n   */\n\n\n  AppointmentPicker.prototype.setTime = function (value) {\n    var time = _parseTime(value);\n\n    var is24h = this.options.mode === '24h';\n    var timePattern = is24h ? this.options.timeFormat24 : this.options.timeFormat12;\n\n    if (!time && !value && this.options.allowReset) {\n      // Empty string, reset time\n      this.time = {};\n      this.displayTime = '';\n\n      _dispatchEvent(this.el, 'change', this.time, this.displayTime);\n    } else if (time) {\n      // A time format was recognized\n      var hour = time.h;\n      var minute = time.m;\n\n      var isValid = _isValid(hour, minute, this.options, this.intervals, this.disabledArr);\n\n      var pad0 = this.options.leadingZero;\n\n      if (isValid) {\n        this.time = time;\n        this.displayTime = _printTime(this.time.h, this.time.m, timePattern, !is24h, pad0);\n\n        _dispatchEvent(this.el, 'change', this.time, this.displayTime);\n      }\n    }\n\n    this.render();\n    this.el.value = this.displayTime;\n  }; // Time getter returns time as object\n\n\n  AppointmentPicker.prototype.getTime = function () {\n    return {\n      h: this.time.h,\n      m: this.time.m,\n      displayTime: this.displayTime\n    };\n  };\n  /**\n   * Checks validity using defined constraints\n   * @returns {Boolean} true if valid\n   */\n\n\n  function _isValid(hour, minute, opt, intervals, disabledArr) {\n    var inDisabledArr = false;\n\n    if (hour < opt.minTime || hour > opt.maxTime || hour > 24) {\n      // Out of min/max\n      return false;\n    } else if (hour === opt.maxTime && minute > 0) {\n      return false; // h:[interval] is out of max\n    } else if (intervals.indexOf(minute) < 0) {\n      // Min doesn't match any interval\n      return false;\n    }\n\n    disabledArr.forEach(function (item, i) {\n      // h:m combination in disabled array\n      if (item.h === hour && item.m === minute) inDisabledArr = true;\n    });\n    return !inDisabledArr ? true : false; // All valid\n  }\n  /**\n   * Add a leading zero and convert to string\n   * @param {Number} number - number that needs to be padded\n   * @returns {String} i.e. '05'\n   */\n\n\n  function _zeroPadTime(number) {\n    if (/^[0-9]{1}$/.test(number)) return '0' + number;\n    return number;\n  }\n  /**\n   * @param {String} time - string that needs to be parsed, i.e. '11:15PM ' or '10:30 am'\n   * @returns {Object|undefined} containing {h: hour, m: minute} or undefined if unrecognized\n   * @see https://regexr.com/4c8fo\n   */\n\n\n  function _parseTime(time) {\n    if (!time) return;\n    var match = time.match(/^\\s*([\\d]{1,2})\\D?([\\d]{2})\\W?(a|p)?.*$/i);\n\n    if (match) {\n      var hour = Number(match[1]);\n      var minute = Number(match[2]);\n      var postfix = match[3];\n\n      if (/p/i.test(postfix) && hour !== 12) {\n        hour += 12;\n      } else if (/a/i.test(postfix) && hour === 12) {\n        hour = 0;\n      }\n\n      return {\n        h: hour,\n        m: minute\n      };\n    }\n  }\n  /**\n   * Create time considering am/pm conventions\n   * @param {Number} hour\n   * @param {Number} minute\n   * @param {String} pattern - used time format\n   * @param {Boolean} isAmPmMode - false if 24h mode\n   * @param {Boolean} padZero - adds leading zero to single-digit hour\n   * @return {String} time string, i.e. '12:30 pm'\n   */\n\n\n  function _printTime(hour, minute, pattern, isAmPmMode, padZero) {\n    var displayHour = hour;\n\n    if (isAmPmMode) {\n      if (hour > 12) {\n        displayHour = hour - 12;\n      } else if (hour == 0) {\n        displayHour = 12;\n      }\n\n      pattern = pattern.replace(hour < 12 ? /p/i : /a/i, '');\n    }\n\n    return pattern.replace('H', padZero ? _zeroPadTime(displayHour) : displayHour).replace('M', _zeroPadTime(minute));\n  } // Find next sibling of item that is not disabled (otherwise return null)\n\n\n  function _getNextSibling(item, direction) {\n    if (!item) return null; // Break condition for recursion\n\n    var next = direction < 0 ? item.previousElementSibling : item.nextElementSibling;\n\n    if (next && next.className.indexOf('disabled') < 0) {\n      return next;\n    } else {\n      // If disabled class found, try the next sibling\n      return _getNextSibling(next, direction);\n    }\n  } // Create a dom node containing the markup for the picker\n\n\n  function _build(_this) {\n    var node = document.createElement('div');\n    node.innerHTML = _assemblePicker(_this.options, _this.intervals, _this.disabledArr);\n    node.className = 'appo-picker' + (_this.options.large ? ' is-large' : '');\n    node.setAttribute('aria-hidden', true);\n\n    _this.el.insertAdjacentElement('afterend', node);\n\n    return node;\n  }\n  /**\n   * Assemble the html containing each appointment represented by a button\n   * @param {Object} opt - options object\n   * @param {Array} intervals - array holding interval permutations\n   * @param {Array} disabledArr - array holding disabled times\n   */\n\n\n  function _assemblePicker(opt, intervals, disabledArr) {\n    // _this.options, _this.intervals, _this.disabledArr\n    var start = opt.startTime;\n    var end = opt.endTime;\n    var inner = '';\n    var isAmPmMode = opt.mode === '12h';\n    var timePattern = isAmPmMode ? opt.timeFormat12 : opt.timeFormat24;\n\n    for (var hour = start; hour < end; hour++) {\n      // Iterate hours start to end\n      for (var j = 0; j < intervals.length; j++) {\n        // Iterate minutes by possible intervals\n        var minute = intervals[j];\n        var isDisabled = !_isValid(hour, minute, opt, intervals, disabledArr);\n\n        var timeFormat = _printTime(hour, minute, timePattern, isAmPmMode, opt.leadingZero); // Replace timeFormat placeholders with time and disabled flag\n\n\n        inner += opt.templateInner.replace('{{time}}', timeFormat).replace(/{{disabled}}/ig, isDisabled ? 'disabled' : '');\n      }\n    }\n\n    return opt.templateOuter.replace('{{classes}}', opt.large ? 'is-large' : '').replace('{{title}}', opt.title).replace('{{innerHtml}}', inner);\n  }\n  /**\n   * Creates and triggers an event with attached time property\n   * @param {HTMLElement} el - element reference\n   * @param {String} name - event name\n   * @param {Object} time - current time\n   */\n\n\n  function _dispatchEvent(el, name, time, displayTime) {\n    var event = document.createEvent('Event');\n    event.initEvent(name + '.appo.picker', true, true);\n    event.time = time;\n    event.displayTime = displayTime;\n    el.dispatchEvent(event);\n  }\n\n  return AppointmentPicker;\n});","map":null,"metadata":{},"sourceType":"script"}